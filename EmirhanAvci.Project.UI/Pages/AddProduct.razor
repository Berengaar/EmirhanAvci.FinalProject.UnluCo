@page "/AddProduct"
@inject IHttpClientFactory ClientFactory

<h3>Add Product</h3>
<hr />
<br />
<EditForm Model="@Product" OnValidSubmit="@Submit">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="Name">Name: </label>
        <InputText class="form-control" id="Name" @bind-Value="Product.Name" />
        <ValidationMessage For="() => Product.Name" />
    </div>
    <div class="form-group">
        <label for="Description">Description: </label>
        <InputText class="form-control" id="Description" @bind-Value="Product.Description" />
        <ValidationMessage For="() => Product.Description" />
    </div>
    <div class="form-group">
        <label for="Description">Price: </label>
        <InputNumber class="form-control" id="Price" @bind-Value="Product.Price" />
        <ValidationMessage For="() => Product.Price" />
    </div>
    <div class="form-group">
        <label for="BrandId">Categories: </label><br />
        @if (Categories != null)
        {
            <InputSelect class="form-control" id="categories" @bind-Value="Product.CategoryId">
                @foreach (var category in Categories.Data.Categories)
                    {
                    <option value="@category.Id">@category.Name</option>
                    }
            </InputSelect>
            <ValidationMessage For="() => Product.CategoryId" />
        }
        <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
    </div>
    <div class="form-group">
        <label for="BrandId">Brands: </label><br />
        @if (Brands != null && Categories != null)
        {
            <InputSelect class="form-control" id="brands" @bind-Value="Product.BrandId">
                @foreach (var brand in Brands.Data.Brands)
                    {
                    <option value="@brand.Id">@brand.Name</option>
                    }
            </InputSelect>
            <ValidationMessage For="() => Product.BrandId" />
        }
    </div>
    <div class="form-group">
        <label for="ColorId">Colors: </label><br />
        @if (Colors != null && Brands != null && Categories != null)
        {
            <InputSelect class="form-control" id="colors" @bind-Value="Product.ColorId">
                @foreach (var color in Colors.Data.Colors)
                    {
                    <option value="@color.Id">@color.Name</option>
                    }
            </InputSelect>
            <ValidationMessage For="() => Product.ColorId" />
        }
        <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
    </div>
    <div class="form-group">
        <label for="ImageFile">Image: </label><br />
        <InputFile OnChange="@HandleFileSelection" id="imagefile" @bind-Value="Product.ImageFile"></InputFile>
    </div>
    <button type="submit" class="btn btn-primary">Kaydet</button>
</EditForm>
@code {
    public ProductAddDto Product = new();

    public DataResult<CategoryListDto> Categories;

    public DataResult<BrandListDto> Brands;

    public DataResult<ColorListDto> Colors;


    protected override async Task OnInitializedAsync()
    {
        var client = ClientFactory.CreateClient();
        Categories= await client.GetFromJsonAsync<DataResult<CategoryListDto>>("http://localhost:5001/api/Category/GetAll");
        Brands = await client.GetFromJsonAsync<DataResult<BrandListDto>>("http://localhost:5001/api/Brand/GetAll");
        Colors = await client.GetFromJsonAsync<DataResult<ColorListDto>>("http://localhost:5001/api/Color/GetAll");
    }

    private async Task Submit()
    {

        var client = ClientFactory.CreateClient();

        var response = await client.PostAsJsonAsync("http://localhost:5001/api/Product/AddAsync", Product);

    }
    void HandleFileSelection(InputFileChangeEventArgs eventArgs)
    {
        IReadOnlyList<IBrowserFile> selectedFiles;
        const int MaxAllowedFiles = 1;
        selectedFiles = eventArgs.GetMultipleFiles(MaxAllowedFiles);
    }
}
